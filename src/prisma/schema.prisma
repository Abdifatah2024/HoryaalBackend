generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// enum Role {
//   ADMIN
//   USER
//   Teacher
// }
enum Role {
  ADMIN
  USER
  Teacher
  PARENT
  PENDING
  ACADEMY // âœ… Corrected and clean
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  WARNING
}

enum SchoolType {
  PRIVATE
  PUBLIC
  NOT_SPECIFIC
}

model User {
  id                 Int       @id @default(autoincrement())
  fullName           String
  username           String?
  email              String    @unique
  phoneNumber        String?   @unique
  password           String
  confirmpassword    String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  photoUrl           String?   @default("Null")
  photoUpdatedAt     DateTime?
  emailVerified      Boolean?
  failedAttempts     Int       @default(0)
  isLocked           Boolean   @default(false)
  lockedAt           DateTime?
  lockCount          Int       @default(0)
  correctionLimit    Int       @default(10)
  correctionsUsed    Int       @default(0)
  resetToken         String?
  resetTokenExpires  DateTime?
  mustChangePassword Boolean   @default(false)
  resetRequestCount  Int       @default(0)
  lastResetRequestAt DateTime?

  // âœ… Fix relation declarations
  students           Student[] @relation("UserCreatedRelation")
  registeredStudents Student[] @relation("RegisteredByRelation")
  parentStudents     Student[] @relation("ParentRelation")

  // âœ… Other Relations (unchanged)
  approvedDiscounts  DiscountLog[]        @relation("ApprovedDiscounts")
  role               Role                 @default(USER)
  notes              note[]
  tasks              task[]
  classes            classes[]
  StudentFee         StudentFee[]
  Attendance         Attendance[]
  Score              Score[]
  Discipline         Discipline[]
  Employee           Employee[]
  DisciplineComment  DisciplineComment[]
  Payment            Payment[]
  TeacherAssignment  TeacherAssignment[]
  TeacherClass       TeacherClass[]
  EmployeeAdvance    EmployeeAdvance[]
  Expense            Expense[]
  DiscountLog        DiscountLog[]
  Document           Document[]
  Announcement       Announcement[]
  assignedWorkPlans  WorkPlan[]           @relation("AssignedWorkPlans")
  reviewedWorkPlans  WorkPlan[]           @relation("ReviewedWorkPlans")
  WorkPlanComment    WorkPlanComment[]
  StudentDeletionLog StudentDeletionLog[]
  deletedStudents    StudentDeletionLog[] @relation("DeletedBy")
  restoredStudents   StudentDeletionLog[] @relation("RestoredBy")
  ProfitLog          ProfitLog[]
  CashLedger         CashLedger[]
}

model Document {
  id           Int      @id @default(autoincrement())
  title        String
  fileName     String
  fileUrl      String
  uploadedAt   DateTime @default(now())
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById Int

  @@map("documents") // Optional: name of the DB table
}

model note {
  id           Int      @id @default(autoincrement())
  NoteContent  String
  created_Date DateTime @default(now())
  updated_at   DateTime @updatedAt
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
}

model task {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  due_date    DateTime
  completed   Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

model classes {
  id                Int                 @id @default(autoincrement())
  name              String
  userid            Int
  user              User                @relation(fields: [userid], references: [id])
  Student           Student[]
  TeacherAssignment TeacherAssignment[]
  TeacherClass      TeacherClass[]
}

model Student {
  id                 Int            @id @default(autoincrement())
  firstname          String
  middlename         String
  lastname           String
  fourtname          String?        @default("Fourt name")
  fullname           String
  classId            Int
  phone              String
  phone2             String?
  parentEmail        String? // âœ… New: Parent email
  district           String // âœ… New: District
  transfer           Boolean        @default(false) // âœ… New: Transfer flag
  bus                String?
  address            String?
  previousSchool     String?
  previousSchoolType SchoolType     @default(NOT_SPECIFIC)
  motherName         String?
  gender             String?
  Age                Int
  fee                Float
  familyName         String?
  FreeReason         String?        @default("Fully Sponsored (No bus fee required)")
  status             StudentStatus? @default(ACTIVE)
  absentCount        Int?           @default(0)
  lastWarningDate    DateTime?
  isdeleted          Boolean        @default(false)
  createdAt          DateTime       @default(now())

  // âœ… Updated Fields
  admissionDate  DateTime @default(now())
  academicYearId Int?     @default(1)
  rollNumber     String?  @unique // âœ… Renamed from admissionNumber
  registeredById Int?     @default(1)
  userid         Int?     @default(1)
  parentUserId   Int?

  // âœ… Relations
  user         User?         @relation("UserCreatedRelation", fields: [userid], references: [id])
  registeredBy User?         @relation("RegisteredByRelation", fields: [registeredById], references: [id])
  parentUser   User?         @relation("ParentRelation", fields: [parentUserId], references: [id])
  academicYear AcademicYear? @relation(fields: [academicYearId], references: [id])
  classes      classes       @relation(fields: [classId], references: [id])

  Discipline         Discipline[]
  PaymentAllocation  PaymentAllocation[]
  Payment            Payment[]
  Attendance         Attendance[]
  Score              Score[]
  StudentFee         StudentFee[]
  StudentAccount     StudentAccount?
  DiscountLog        DiscountLog[]
  Bus                Bus?                 @relation(fields: [busId], references: [id])
  busId              Int?
  StudentDeletionLog StudentDeletionLog[]
}

model StudentDeletionLog {
  id         Int       @id @default(autoincrement())
  studentId  Int
  reason     String
  userId     Int? // User who deleted the student
  restoredBy Int? // User who restored the student
  deletedAt  DateTime  @default(now())
  restoredAt DateTime?

  // Relations
  Student        Student @relation(fields: [studentId], references: [id])
  deletedByUser  User?   @relation("DeletedBy", fields: [userId], references: [id], map: "fk_deleted_by_user_custom")
  restoredByUser User?   @relation("RestoredBy", fields: [restoredBy], references: [id], map: "fk_restored_by_user")
  User           User?   @relation(fields: [userId], references: [id])
}

model StudentFee {
  id                Int                 @id @default(autoincrement())
  studentId         Int
  student           Student             @relation(fields: [studentId], references: [id])
  month             Int // 1-12
  year              Int
  isPaid            Boolean             @default(false) // Optional: auto-compute based on allocations
  student_fee       Decimal?
  PaymentAllocation PaymentAllocation[]
  User              User?               @relation(fields: [userId], references: [id])
  userId            Int?

  @@unique([studentId, month, year]) // Ensure only one fee per month per student
}

model Payment {
  id          Int                 @id @default(autoincrement())
  studentId   Int
  student     Student             @relation(fields: [studentId], references: [id])
  userId      Int
  user        User                @relation(fields: [userId], references: [id])
  amountPaid  Decimal
  discount    Decimal             @default(0.0)
  Description String              @default("no")
  date        DateTime            @default(now())
  allocations PaymentAllocation[]
}

// schema.prisma
model DiscountLog {
  id           Int       @id @default(autoincrement())
  studentId    Int
  studentFeeId Int
  month        Int
  year         Int
  amount       Float
  reason       String
  approvedBy   Int
  verified     Boolean   @default(false)
  verifiedBy   String?
  verifiedAt   DateTime?
  createdAt    DateTime  @default(now())

  student      Student @relation(fields: [studentId], references: [id])
  approvedUser User    @relation("ApprovedDiscounts", fields: [approvedBy], references: [id])
  User         User?   @relation(fields: [userId], references: [id])
  userId       Int?

  @@index([studentId])
  @@index([studentFeeId])
  @@index([month, year])
}

model MonthlyDiscountLimit {
  id        Int      @id @default(autoincrement())
  month     Int // 1-12
  year      Int
  maxLimit  Float // Max allowed discount for this month
  createdAt DateTime @default(now())

  @@unique([month, year])
}

model Bus {
  id       Int       @id @default(autoincrement())
  name     String    @unique // e.g. "Bus 1", "Route A"
  route    String?
  plate    String? // ðŸ†• Plate number
  type     String? // ðŸ†• Type of bus (e.g. Minibus, Coach)
  color    String? // ðŸ†• Color of the bus
  seats    Int? // ðŸ†• Number of seats
  capacity Int? // Optional, can be same as seats or total capacity
  driverId Int? // Link to Employee
  driver   Employee? @relation(fields: [driverId], references: [id])
  students Student[] // Back relation to Student
}

model PaymentAllocation {
  id           Int        @id @default(autoincrement())
  paymentId    Int
  payment      Payment    @relation(fields: [paymentId], references: [id])
  studentFeeId Int
  studentFee   StudentFee @relation(fields: [studentFeeId], references: [id])
  amount       Decimal
  Student      Student?   @relation(fields: [studentId], references: [id])
  studentId    Int?
}

model StudentAccount {
  id           Int      @id @default(autoincrement())
  studentId    Int      @unique
  student      Student  @relation(fields: [studentId], references: [id])
  carryForward Decimal  @default(0.0)
  updatedAt    DateTime @updatedAt
}

model Attendance {
  id          Int      @id @default(autoincrement())
  date        DateTime @default(now())
  present     Boolean
  remark      String?
  studentId   Int
  userId      Int
  absentCount Int?
  created_at  DateTime @default(now())

  // Parent call info directly in this model
  callTime   DateTime? // Null if no call was made
  callStatus String? // e.g. "Completed", "Missed", "No Answer"
  callNotes  String? // Notes about the call

  student Student @relation(fields: [studentId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

enum ExamType {
  MONTHLY
  MIDTERM
  FINAL
}

model Exam {
  id             Int           @id @default(autoincrement())
  name           String        @unique
  type           ExamType
  maxMarks       Int
  scores         Score[]
  AcademicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  academicYearId Int?
}

model Subject {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  scores            Score[]
  AcademicYear      AcademicYear?       @relation(fields: [academicYearId], references: [id])
  academicYearId    Int?
  TeacherAssignment TeacherAssignment[]
  TeacherClass      TeacherClass[]
}

model Score {
  id              Int           @id @default(autoincrement())
  student         Student       @relation(fields: [studentId], references: [id])
  studentId       Int
  subject         Subject       @relation(fields: [subjectId], references: [id])
  subjectId       Int
  exam            Exam          @relation(fields: [examId], references: [id])
  examId          Int
  marks           Int
  userid          Int
  // âœ… New fields:
  correctionCount Int           @default(0) // Number of updates allowed
  correctionLimit Int           @default(10) // âœ… New: settable by admin
  lastUpdatedAt   DateTime? // Optional: for audit
  lastUpdatedBy   Int? // Optional: who made the last update
  user            User          @relation(fields: [userid], references: [id])
  AcademicYear    AcademicYear? @relation(fields: [academicYearId], references: [id])
  academicYearId  Int
}

model AcademicYear {
  id   Int    @id @default(autoincrement())
  year String @unique // e.g., "2024-2025"

  exams    Exam[]
  score    Score[]
  subjects Subject[]
  Student  Student[]
}

model Discipline {
  id          Int      @id @default(autoincrement())
  studentId   Int
  type        String // e.g., "Late", "Fighting", "Disrespect", etc.
  description String // Detailed explanation of the incident
  actionTaken String? // Optional: e.g., "Warning", "Suspension", "Detention"
  recordedBy  Int // ID of the staff/user who recorded it
  recordedAt  DateTime @default(now())
  isDeleted   Boolean  @default(false)

  student           Student             @relation(fields: [studentId], references: [id])
  user              User                @relation(fields: [recordedBy], references: [id])
  DisciplineComment DisciplineComment[]
}

model Employee {
  id          Int      @id @default(autoincrement())
  fullName    String
  dateOfBirth DateTime
  gender      String
  nationalId  String   @unique
  phone       String
  email       String   @unique
  address     String

  jobTitle   String
  dateOfHire DateTime

  education String

  bankAccount String
  salary      Float

  appraisalRecords    String?
  disciplinaryActions String?

  // Relationship to User (creator)
  createdById Int
  createdBy   User @relation(fields: [createdById], references: [id])

  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  EmployeeAdvance     EmployeeAdvance[]
  Bus                 Bus[]
  attendancesMarked   EmployeeAttendance[] @relation("MarkedByEmployee")
  attendancesReceived EmployeeAttendance[] @relation("MarkedEmployee")
}

model EmployeeAdvance {
  id          Int      @id @default(autoincrement())
  employeeId  Int
  employee    Employee @relation(fields: [employeeId], references: [id])
  amount      Float
  reason      String?
  dateIssued  DateTime @default(now())
  month       Int
  year        Int
  createdById Int
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model Expense {
  id            Int      @id @default(autoincrement())
  category      String
  amount        Float
  date          DateTime
  description   String?
  paymentMethod String
  receiptUrl    String?
  approvedBy    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId Int // âœ… Foreign key
  user   User @relation(fields: [userId], references: [id]) // âœ… Relation
}

model DisciplineComment {
  id           Int      @id @default(autoincrement())
  content      String
  createdAt    DateTime @default(now())
  disciplineId Int
  userId       Int

  // Relations
  discipline Discipline @relation(fields: [disciplineId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
}

model TeacherAssignment {
  id        Int @id @default(autoincrement())
  teacherId Int // links to User with role: Teacher
  subjectId Int
  classId   Int

  teacher User    @relation(fields: [teacherId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])
  class   classes @relation(fields: [classId], references: [id])

  @@unique([teacherId, subjectId, classId]) // prevent duplicates
}

model TeacherClass {
  id        Int @id @default(autoincrement())
  teacherId Int // links to User with role: Teacher
  classId   Int
  subjectId Int // one subject only per teacher

  teacher User    @relation(fields: [teacherId], references: [id])
  class   classes @relation(fields: [classId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@unique([teacherId, classId]) // avoid duplicate entries
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  message     String
  createdAt   DateTime @default(now())
  startDate   DateTime
  endDate     DateTime
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById Int
  targetRole  Role
}

model WorkPlan {
  id              Int               @id @default(autoincrement())
  title           String
  description     String
  assignedToId    Int
  assignedTo      User              @relation("AssignedWorkPlans", fields: [assignedToId], references: [id])
  status          String            @default("To Do")
  reviewedById    Int?
  reviewedBy      User?             @relation("ReviewedWorkPlans", fields: [reviewedById], references: [id])
  reviewComments  String?
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  WorkPlanComment WorkPlanComment[]
}

model WorkPlanComment {
  id         Int      @id @default(autoincrement())
  comment    String
  status     String   @default("To Do") // or Enum if you prefer
  workPlanId Int
  userId     Int
  createdAt  DateTime @default(now())

  // Relations
  workPlan WorkPlan @relation(fields: [workPlanId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model Asset {
  id               Int      @id @default(autoincrement())
  assetNumber      String   @unique // <-- NEW FIELD
  name             String
  category         String
  purchaseDate     DateTime
  purchasePrice    Float
  depreciationRate Float // e.g., 10 (%) per year
  currentValue     Float // auto-calculated or updated manually
  purchaseCompany  String? // vendor name
  condition        String
  location         String
  assignedTo       String?
  serialNumber     String?
  remarks          String?
  createdAt        DateTime @default(now())
}

model EmployeeAttendance {
  id      Int      @id @default(autoincrement())
  date    DateTime @default(now())
  present Boolean
  remark  String?

  employeeId Int
  employee   Employee @relation("MarkedEmployee", fields: [employeeId], references: [id])

  markedById Int
  markedBy   Employee @relation("MarkedByEmployee", fields: [markedById], references: [id])

  createdAt DateTime @default(now())
}

model ProfitLog {
  id         Int      @id @default(autoincrement())
  month      Int // 1-12
  year       Int
  closedById Int
  closedBy   User     @relation(fields: [closedById], references: [id])
  closedAt   DateTime @default(now())

  currentIncome         Float
  previousIncome        Float
  advanceIncome         Float
  totalRevenue          Float
  totalDiscounts        Float
  netRevenue            Float
  totalExpenses         Float
  totalEmployeeAdvances Float
  netIncome             Float

  notes String? // Optional: add a note like "Term 1 closed"

  @@unique([month, year]) // Prevent duplicate closure
}

model CashLedger {
  id           Int             @id @default(autoincrement())
  date         DateTime        @default(now())
  type         TransactionType // DEPOSIT or WITHDRAWAL
  source       String // e.g., "ProfitLog", "Donation", "Emergency Expense"
  referenceId  Int? // e.g., ProfitLog ID
  amount       Float
  method       String // e.g., "Bank", "Cash", "Mobile"
  description  String?
  balanceAfter Float

  createdById Int
  createdBy   User @relation(fields: [createdById], references: [id])
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
}
