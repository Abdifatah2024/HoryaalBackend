// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// enum Role {
//   ADMIN
//   USER
//   Teacher
// }
enum Role {
  ADMIN
  USER
  Teacher
  PARENT
  PENDING
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  WARNING
}

enum SchoolType {
  PRIVATE
  PUBLICs
  NOT_SPECIFIC
}

model User {
  id                 Int       @id @default(autoincrement())
  fullName           String
  username           String?
  email              String    @unique
  phoneNumber        String?   @unique
  password           String
  confirmpassword    String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  photoUrl           String?   @default("Null")
  photoUpdatedAt     DateTime?
  emailVerified      Boolean?
  failedAttempts     Int       @default(0)
  isLocked           Boolean   @default(false)
  lockedAt           DateTime?
  lockCount          Int       @default(0)
  correctionLimit    Int       @default(10)
  correctionsUsed    Int       @default(0)
  resetToken         String?
  resetTokenExpires  DateTime?
  mustChangePassword Boolean   @default(false) // ✅ (optional)
  resetRequestCount  Int       @default(0)
  lastResetRequestAt DateTime?
  // ✅ Relation to students created by this user
  students           Student[] // Don't rename this unless needed

  // ✅ Relation to students where this user is the parent
  parentStudents Student[] @relation("ParentRelation") // This is NEW

  // Other relations...
  approvedDiscounts DiscountLog[]       @relation("ApprovedDiscounts")
  role              Role                @default(USER)
  notes             note[]
  tasks             task[]
  classes           classes[]
  StudentFee        StudentFee[]
  Attendance        Attendance[]
  Score             Score[]
  Discipline        Discipline[]
  Employee          Employee[]
  DisciplineComment DisciplineComment[]
  Payment           Payment[]
  TeacherAssignment TeacherAssignment[]
  TeacherClass      TeacherClass[]
  EmployeeAdvance   EmployeeAdvance[]
  Expense           Expense[]
  DiscountLog       DiscountLog[]
  Document          Document[]
}

model Document {
  id           Int      @id @default(autoincrement())
  title        String
  fileName     String
  fileUrl      String
  uploadedAt   DateTime @default(now())
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById Int

  @@map("documents") // Optional: name of the DB table
}

model note {
  id           Int      @id @default(autoincrement())
  NoteContent  String
  created_Date DateTime @default(now())
  updated_at   DateTime @updatedAt
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
}

model task {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  due_date    DateTime
  completed   Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

model classes {
  id                Int                 @id @default(autoincrement())
  name              String
  userid            Int
  user              User                @relation(fields: [userid], references: [id])
  Student           Student[]
  TeacherAssignment TeacherAssignment[]
  TeacherClass      TeacherClass[]
}

// model Student {
//   id                 Int                 @id @default(autoincrement())
//   firstname          String
//   middlename         String
//   lastname           String
//   fourtname          String?             @default("Fourt name")
//   fullname           String
//   classId            Int
//   phone              String
//   phone2             String?
//   bus                String?
//   address            String?
//   previousSchool     String?
//   previousSchoolType SchoolType          @default(NOT_SPECIFIC) // ✅ Here
//   motherName         String?
//   gender             String?
//   Age                Int
//   fee                Decimal
//   familyName         String?
//   status             StudentStatus?      @default(ACTIVE)
//   absentCount        Int?                @default(0)
//   lastWarningDate    DateTime?
//   isdeleted          Boolean             @default(false)
//   userid             Int
//   user               User                @relation(fields: [userid], references: [id])
//   parentUserId       Int?
//   parentUser         User?               @relation("ParentRelation", fields: [parentUserId], references: [id])
//   classes            classes             @relation(fields: [classId], references: [id])
//   Discipline         Discipline[]
//   PaymentAllocation  PaymentAllocation[]
//   Payment            Payment[]
//   Attendance         Attendance[]
//   Score              Score[]
//   StudentFee         StudentFee[]
//   StudentAccount     StudentAccount?
//   DiscountLog        DiscountLog[]
// }
model Student {
  id                 Int                 @id @default(autoincrement())
  firstname          String
  middlename         String
  lastname           String
  fourtname          String?             @default("Fourt name")
  fullname           String
  classId            Int
  phone              String
  phone2             String?
  bus                String?
  address            String?
  previousSchool     String?
  previousSchoolType SchoolType          @default(NOT_SPECIFIC)
  motherName         String?
  gender             String?
  Age                Int
  fee                Decimal
  familyName         String?
  status             StudentStatus?      @default(ACTIVE)
  absentCount        Int?                @default(0)
  lastWarningDate    DateTime?
  isdeleted          Boolean             @default(false)
  createdAt          DateTime            @default(now()) // ✅ Add this line
  userid             Int
  user               User                @relation(fields: [userid], references: [id])
  parentUserId       Int?
  parentUser         User?               @relation("ParentRelation", fields: [parentUserId], references: [id])
  classes            classes             @relation(fields: [classId], references: [id])
  Discipline         Discipline[]
  PaymentAllocation  PaymentAllocation[]
  Payment            Payment[]
  Attendance         Attendance[]
  Score              Score[]
  StudentFee         StudentFee[]
  StudentAccount     StudentAccount?
  DiscountLog        DiscountLog[]
}

model StudentFee {
  id                Int                 @id @default(autoincrement())
  studentId         Int
  student           Student             @relation(fields: [studentId], references: [id])
  month             Int // 1-12
  year              Int
  isPaid            Boolean             @default(false) // Optional: auto-compute based on allocations
  PaymentAllocation PaymentAllocation[]
  User              User?               @relation(fields: [userId], references: [id])
  userId            Int?

  @@unique([studentId, month, year]) // Ensure only one fee per month per student
}

model Payment {
  id          Int                 @id @default(autoincrement())
  studentId   Int
  student     Student             @relation(fields: [studentId], references: [id])
  userId      Int
  user        User                @relation(fields: [userId], references: [id])
  amountPaid  Decimal
  discount    Decimal             @default(0.0)
  Description String              @default("no")
  date        DateTime            @default(now())
  allocations PaymentAllocation[]
}

// schema.prisma
model DiscountLog {
  id           Int       @id @default(autoincrement())
  studentId    Int
  studentFeeId Int
  month        Int
  year         Int
  amount       Float
  reason       String
  approvedBy   Int
  verified     Boolean   @default(false)
  verifiedBy   String?
  verifiedAt   DateTime?
  createdAt    DateTime  @default(now())

  student      Student @relation(fields: [studentId], references: [id])
  approvedUser User    @relation("ApprovedDiscounts", fields: [approvedBy], references: [id])
  User         User?   @relation(fields: [userId], references: [id])
  userId       Int?

  @@index([studentId])
  @@index([studentFeeId])
  @@index([month, year])
}

model PaymentAllocation {
  id           Int        @id @default(autoincrement())
  paymentId    Int
  payment      Payment    @relation(fields: [paymentId], references: [id])
  studentFeeId Int
  studentFee   StudentFee @relation(fields: [studentFeeId], references: [id])
  amount       Decimal
  Student      Student?   @relation(fields: [studentId], references: [id])
  studentId    Int?
}

model StudentAccount {
  id           Int      @id @default(autoincrement())
  studentId    Int      @unique
  student      Student  @relation(fields: [studentId], references: [id])
  carryForward Decimal  @default(0.0)
  updatedAt    DateTime @updatedAt
}

model Attendance {
  id          Int      @id @default(autoincrement())
  date        DateTime @default(now())
  present     Boolean
  remark      String?
  studentId   Int
  userId      Int
  absentCount Int?
  created_at  DateTime @default(now())
  student     Student  @relation(fields: [studentId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

enum ExamType {
  MONTHLY
  MIDTERM
  FINAL
}

model Exam {
  id             Int           @id @default(autoincrement())
  name           String        @unique
  type           ExamType
  maxMarks       Int
  scores         Score[]
  AcademicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  academicYearId Int?
}

model Subject {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  scores            Score[]
  AcademicYear      AcademicYear?       @relation(fields: [academicYearId], references: [id])
  academicYearId    Int?
  TeacherAssignment TeacherAssignment[]
  TeacherClass      TeacherClass[]
}

model Score {
  id              Int           @id @default(autoincrement())
  student         Student       @relation(fields: [studentId], references: [id])
  studentId       Int
  subject         Subject       @relation(fields: [subjectId], references: [id])
  subjectId       Int
  exam            Exam          @relation(fields: [examId], references: [id])
  examId          Int
  marks           Int
  userid          Int
  // ✅ New fields:
  correctionCount Int           @default(0) // Number of updates allowed
  correctionLimit Int           @default(10) // ✅ New: settable by admin
  lastUpdatedAt   DateTime? // Optional: for audit
  lastUpdatedBy   Int? // Optional: who made the last update
  user            User          @relation(fields: [userid], references: [id])
  AcademicYear    AcademicYear? @relation(fields: [academicYearId], references: [id])
  academicYearId  Int
}

model AcademicYear {
  id   Int    @id @default(autoincrement())
  year String @unique // e.g., "2024-2025"

  exams    Exam[]
  score    Score[]
  subjects Subject[]
}

model Discipline {
  id          Int      @id @default(autoincrement())
  studentId   Int
  type        String // e.g., "Late", "Fighting", "Disrespect", etc.
  description String // Detailed explanation of the incident
  actionTaken String? // Optional: e.g., "Warning", "Suspension", "Detention"
  recordedBy  Int // ID of the staff/user who recorded it
  recordedAt  DateTime @default(now())
  isDeleted   Boolean  @default(false)

  student           Student             @relation(fields: [studentId], references: [id])
  user              User                @relation(fields: [recordedBy], references: [id])
  DisciplineComment DisciplineComment[]
}

model Employee {
  id          Int      @id @default(autoincrement())
  fullName    String
  dateOfBirth DateTime
  gender      String
  nationalId  String   @unique
  phone       String
  email       String   @unique
  address     String

  jobTitle   String
  dateOfHire DateTime

  education String

  bankAccount String
  salary      Float

  appraisalRecords    String?
  disciplinaryActions String?

  // Relationship to User (creator)
  createdById Int
  createdBy   User @relation(fields: [createdById], references: [id])

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  EmployeeAdvance EmployeeAdvance[]
}

model EmployeeAdvance {
  id          Int      @id @default(autoincrement())
  employeeId  Int
  employee    Employee @relation(fields: [employeeId], references: [id])
  amount      Float
  reason      String?
  dateIssued  DateTime @default(now())
  month       Int
  year        Int
  createdById Int
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model Expense {
  id            Int      @id @default(autoincrement())
  category      String
  amount        Float
  date          DateTime
  description   String?
  paymentMethod String
  receiptUrl    String?
  approvedBy    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId Int // ✅ Foreign key
  user   User @relation(fields: [userId], references: [id]) // ✅ Relation
}

model DisciplineComment {
  id           Int      @id @default(autoincrement())
  content      String
  createdAt    DateTime @default(now())
  disciplineId Int
  userId       Int

  // Relations
  discipline Discipline @relation(fields: [disciplineId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
}

model TeacherAssignment {
  id        Int @id @default(autoincrement())
  teacherId Int // links to User with role: Teacher
  subjectId Int
  classId   Int

  teacher User    @relation(fields: [teacherId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])
  class   classes @relation(fields: [classId], references: [id])

  @@unique([teacherId, subjectId, classId]) // prevent duplicates
}

model TeacherClass {
  id        Int @id @default(autoincrement())
  teacherId Int // links to User with role: Teacher
  classId   Int
  subjectId Int // one subject only per teacher

  teacher User    @relation(fields: [teacherId], references: [id])
  class   classes @relation(fields: [classId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@unique([teacherId, classId]) // avoid duplicate entries
}
