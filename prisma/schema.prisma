// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  Teacher
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  WARNING
}

// model User {
//   id              Int          @id @default(autoincrement())
//   fullName        String
//   username        String       @unique
//   email           String       @unique
//   phoneNumber     String?      @unique
//   password        String
//   confirmpassword String // Hashed password
//   createdAt       DateTime     @default(now())
//   updatedAt       DateTime     @updatedAt
//   photoUrl        String?      @default("Null")
//   photoUpdatedAt  DateTime?
//   emailVerified   Boolean?
//   notes           note[]
//   tasks           task[]
//   classes         classes[]
//   students        Student[]
//   StudentFee      StudentFee[]
//   Attendance      Attendance[]
//   Score           Score[]
//   role            Role         @default(USER)
//   Discipline      Discipline[]
// }
model User {
  id              Int          @id @default(autoincrement())
  fullName        String
  username        String       @unique
  email           String       @unique
  phoneNumber     String?      @unique
  password        String
  confirmpassword String // Hashed password
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  photoUrl        String?      @default("Null")
  photoUpdatedAt  DateTime?
  emailVerified   Boolean?
  notes           note[]
  tasks           task[]
  classes         classes[]
  students        Student[]
  StudentFee      StudentFee[]
  Attendance      Attendance[]
  Score           Score[]
  role            Role         @default(USER)
  Discipline      Discipline[]

  // ðŸ‘‡ Add these two fields:
  resetToken        String? // for verification code
  resetTokenExpires DateTime? // token expiry time
}

model note {
  id           Int      @id @default(autoincrement())
  NoteContent  String
  created_Date DateTime @default(now())
  updated_at   DateTime @updatedAt
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
}

model task {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  due_date    DateTime
  completed   Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

model classes {
  id      Int       @id @default(autoincrement())
  name    String
  userid  Int
  user    User      @relation(fields: [userid], references: [id])
  Student Student[]
}

// model Student {
//   id              Int          @id @default(autoincrement())
//   firstname       String
//   middlename      String
//   lastname        String
//   fullname        String
//   classId         Int
//   phone           String
//   gender          String
//   Age             Int
//   fee             Float
//   Amount          Float
//   Discipline      Discipline[]
//   status          String?      @default("ACTIVE") // Could use enum
//   absentCount     Int?         @default(0)
//   lastWarningDate DateTime? // Optional warning tracking

//   isdeleted  Boolean      @default(false)
//   classes    classes      @relation(fields: [classId], references: [id])
//   userid     Int
//   user       User         @relation(fields: [userid], references: [id])
//   StudentFee StudentFee[]
//   Payment    Payment[]
//   Attendance Attendance[]
//   Score      Score[]
// }
model Student {
  id              Int       @id @default(autoincrement())
  firstname       String
  middlename      String
  lastname        String
  fullname        String
  classId         Int
  phone           String
  phone2          String? // New: second phone (optional)
  bus             String? // New: bus route or number
  address         String? // New: home address
  previousSchool  String? // New: previous school name
  motherName      String? // New: mother's full name
  gender          String
  Age             Int
  fee             Float // Monthly school fee
  status          String?   @default("ACTIVE") // Could use enum later
  absentCount     Int?      @default(0)
  lastWarningDate DateTime? // Optional warning tracking
  isdeleted       Boolean   @default(false)

  // Relations
  classes    classes      @relation(fields: [classId], references: [id])
  userid     Int
  user       User         @relation(fields: [userid], references: [id])
  Discipline Discipline[]
  StudentFee StudentFee[]
  Payment    Payment[]
  Attendance Attendance[]
  Score      Score[]
}

model StudentFee {
  id        Int       @id @default(autoincrement())
  studentId Int
  student   Student   @relation(fields: [studentId], references: [id])
  month     Int
  year      Int
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  amount    Float // Required fee for this student
  Payment   Payment[]
}

model Payment {
  id         Int        @id @default(autoincrement())
  studentId  Int
  student    Student    @relation(fields: [studentId], references: [id])
  month      Int // Represents the month (1-12)
  year       Int // Represents the year (e.g., 2025)
  FeeId      Int
  fee        StudentFee @relation(fields: [FeeId], references: [id])
  userId     Int
  amountPaid Float // Amount paid by the student
  discount   Float // Discount given, if any
  balance    Float // Remaining balance after payment
  date       DateTime   @default(now()) // Payment date
}

model Attendance {
  id          Int      @id @default(autoincrement())
  date        DateTime @default(now())
  present     Boolean
  remark      String?
  studentId   Int
  userId      Int
  absentCount Int?
  created_at  DateTime @default(now())
  student     Student  @relation(fields: [studentId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

enum ExamType {
  MONTHLY
  MIDTERM
  FINAL
}

model Exam {
  id             Int           @id @default(autoincrement())
  name           String        @unique
  type           ExamType
  maxMarks       Int
  scores         Score[]
  AcademicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  academicYearId Int?
}

model Subject {
  id             Int           @id @default(autoincrement())
  name           String        @unique
  scores         Score[]
  AcademicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  academicYearId Int?
}

model Score {
  id        Int     @id @default(autoincrement())
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId Int
  exam      Exam    @relation(fields: [examId], references: [id])
  examId    Int
  marks     Int
  userid    Int

  user           User          @relation(fields: [userid], references: [id])
  AcademicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  academicYearId Int?
}

model AcademicYear {
  id   Int    @id @default(autoincrement())
  year String @unique // e.g., "2024-2025"

  exams    Exam[]
  score    Score[]
  subjects Subject[]
}

model Discipline {
  id          Int      @id @default(autoincrement())
  studentId   Int
  type        String // e.g., "Late", "Fighting", "Disrespect", etc.
  description String // Detailed explanation of the incident
  actionTaken String? // Optional: e.g., "Warning", "Suspension", "Detention"
  recordedBy  Int // ID of the staff/user who recorded it
  recordedAt  DateTime @default(now())
  isDeleted   Boolean  @default(false)

  student Student @relation(fields: [studentId], references: [id])
  user    User    @relation(fields: [recordedBy], references: [id])
}
